const{app:app,BrowserWindow:BrowserWindow,session:session,systemPreferences:systemPreferences}=require("electron"),{ipcMain:ipcMain}=require("electron"),{webContents:webContents}=require("electron"),{PythonShell:PythonShell}=require("python-shell"),{Series:Series,DataFrame:DataFrame}=require("pandas-js"),{dialog:dialog}=require("electron");var fs=require("fs"),rand_gen=require("random-seed"),nj=require("./assets/js/dependencies/numjs.min.js");const console=require("console"),{time:time,Console:Console}=require("console"),{resolve:resolve,parse:parse}=require("path"),{rejects:rejects}=require("assert");require("@electron/remote/main").initialize();const{batt_temp_adjustment:batt_temp_adjustment,batt_discharge_current_compensation:batt_discharge_current_compensation}=require("./assets/js/core/battery_logic"),{batt_DOD_compensation_program:batt_DOD_compensation_program,batt_arhennius_compensation_program:batt_arhennius_compensation_program}=require("./assets/js/core/battery_logic"),{batt_SOH_compensation_program:batt_SOH_compensation_program,batt_recharge_power_modelling:batt_recharge_power_modelling}=require("./assets/js/core/battery_logic"),{batt_recharge_factor_compen:batt_recharge_factor_compen}=require("./assets/js/core/battery_logic"),{solar_panel_aging_program:solar_panel_aging_program,solar_panel_temperature_program:solar_panel_temperature_program}=require("./assets/js/core/solar_logic"),{hours_to_days:hours_to_days,linear_regression:linear_regression}=require("./assets/js/core/main_drivers");var mainWindow;function createWindow(){(mainWindow=new BrowserWindow({title:"INSTINCT II",fullscreen:!1,frame:!0,transparent:!1,opacity:1,width:1200,height:800,minWidth:1200,minHeight:800,icon:"./icon/instinct2.ico",webPreferences:{nodeIntegration:!0,contextIsolation:!1,enableRemoteModule:!0,plugins:!0,experimentalFeatures:!0,scrollBounce:!0}})).loadFile("pages/z_main.html"),mainWindow.webContents.openDevTools(),mainWindow.webContents.on("did-finish-load",e=>{}),mainWindow.webContents.on("did-start-loading",e=>{}),mainWindow.webContents.on("did-stop-loading",e=>{}),mainWindow.webContents.on("dom-ready",e=>{})}app.whenReady().then(createWindow),app.on("window-all-closed",()=>{"darwin"!==process.platform&&app.quit()}),app.on("activate",()=>{0===BrowserWindow.getAllWindows().length&&createWindow()}),ipcMain.on("exit_command",(event,data)=>{console.log(data),app.quit()}),ipcMain.on("location_done",(event,data)=>{var loc_txt=JSON.stringify(data);fs.writeFile(resolve(__dirname,"database/temp_data.json"),loc_txt,(function(err){if(err)throw err;event.sender.send("main_responder_channel","Location Data Saved")}))}),ipcMain.on("load_profile_done",(event,data)=>{var load_txt=JSON.stringify(data);fs.writeFile(resolve(__dirname,"database/temp_data.json"),load_txt,(function(err){if(err)throw err;event.sender.send("main_responder_channel","Load Profile Saved")}))}),ipcMain.on("components_done",(event,data)=>{var component_txt=JSON.stringify(data);fs.writeFile(resolve(__dirname,"database/temp_data.json"),component_txt,(function(err){if(err)throw err;event.sender.send("main_responder_channel","Components Saved")}))}),ipcMain.on("simulation_parameters",(event,data)=>{var sim_txt=JSON.stringify(data);fs.writeFile(resolve(__dirname,"database/temp_data.json"),sim_txt,(function(err){if(err)throw err;event.returnValue="Success",event.sender.send("main_responder_channel","Simulation Data Saved")}))});const testms=async()=>{for(var i=0;i<1e4;i++)i+=2,console.log(i);return"Data Loaded"};ipcMain.on("load_profile_yearly",(event,instinct_config)=>{console.log(instinct_config);var software_config=fs.readFileSync(resolve(__dirname,"database/config_data.json"));software_config=JSON.parse(software_config);let datapoint_count=instinct_config.load_datapoints,the_responseObject=[];console.log(software_config),console.log(software_config.config_load_profile);var seed=software_config.config_load_profile[0].seed;let rand_load=rand_gen.create(seed),simulation_hours=software_config.config_load_profile[0].simulation_hours,load_variability=software_config.config_load_profile[0].load_variability,load_variability_tolerance=software_config.config_load_profile[0].load_variability_tolerance,load_inflation_per_year=software_config.config_load_profile[0].load_inflation_per_year,weekend_load_rise=software_config.config_load_profile[0].weekend_load_rise,hour_id=0,count_days=0,count_hours=0,count_weeks=0,reset_hours=0,reset_weekDays=0,yearly_load_inflation=0,years_past=0,generated_load_profile=Array(simulation_hours).fill(0),weekend_detect_array=Array(simulation_hours).fill(0),load_data=instinct_config.load_profile,hours_array=Array.from({length:simulation_hours},(x,i)=>i);for(;count_hours<hours_array.length;count_hours++)reset_hours+=1,reset_weekDays>4&&(weekend_detect_array[count_hours]=1),reset_hours%24==0&&(count_days+=1,reset_weekDays+=1,reset_hours=0),7==reset_weekDays&&(count_weeks+=1,reset_weekDays=0),count_months=count_weeks/4;for(count_days=0,load_data_inst=0;load_data_inst<simulation_hours;load_data_inst++)load_variability=.01*rand_load.floatBetween(-1*load_variability_tolerance,load_variability_tolerance),hour_id=load_data_inst%24,0==hour_id&&0!=load_data_inst&&(count_days+=1),generated_load_profile[load_data_inst]=load_data[hour_id],generated_load_profile[load_data_inst]+=generated_load_profile[load_data_inst]*load_variability+generated_load_profile[load_data_inst]*yearly_load_inflation,load_data_inst%2500==0&&0!=load_data_inst&&(years_past+=1,yearly_load_inflation=years_past*load_inflation_per_year/100),0!=weekend_load_rise&&1==weekend_detect_array[load_data_inst]&&(generated_load_profile[load_data_inst]+=generated_load_profile[load_data_inst]*(weekend_load_rise/100));the_responseObject.load_profile_yearly=generated_load_profile,the_responseObject.max_demand_load_yearly=generated_load_profile.reduce((a,b)=>Math.max(a,b)),the_responseObject.energy_demand_load_yearly=generated_load_profile.reduce((a,b)=>a+b),event.returnValue=the_responseObject}),ipcMain.on("battery_recomm_sims",(event,instinct_config)=>{let the_responseObject=[],batt_recom_DOD=instinct_config.batt_recom_DOD,batt_recom_min_DOA=instinct_config.batt_recom_min_DOA,batt_recom_eff=instinct_config.batt_recom_eff,normalized_energy_demand_perDay=instinct_config.energy_demand*batt_recom_min_DOA/(batt_recom_DOD*batt_recom_eff),tempRecom=[];instinct_config.system_voltage.forEach(sys_voltage=>{instinct_config.batt_voltages.forEach(batt_voltage=>{var batt_start_AH=parseInt(instinct_config.batt_AH_ranges[0]),batt_end_AH=parseInt(instinct_config.batt_AH_ranges[1]),batt_step_AH=parseInt(instinct_config.batt_AH_ranges[2]),batt_start_parallel=parseInt(instinct_config.batt_parallel_qty[0]),batt_end_parallel=parseInt(instinct_config.batt_parallel_qty[1]),battery_oversize_factor=parseFloat(instinct_config.battery_oversize_factor);for(i=batt_start_AH;i<=batt_end_AH;i+=batt_step_AH)for(n=batt_start_parallel;n<=batt_end_parallel;n+=1){let objRecom={},batt_total_energy=n*sys_voltage*i;batt_total_energy>=normalized_energy_demand_perDay&&batt_total_energy<normalized_energy_demand_perDay*battery_oversize_factor&&(objRecom.systemVoltage=sys_voltage,objRecom.battVoltage=batt_voltage,objRecom.noOfSeries=sys_voltage/batt_voltage,objRecom.batt_AH=i,objRecom.noOfParallel=n,objRecom.energyCapacity=batt_total_energy,objRecom.normalizedEnergyDemand=normalized_energy_demand_perDay,objRecom.totalCost=Math.round(104*i*n*(sys_voltage/batt_voltage)),tempRecom.push(objRecom))}})}),the_responseObject.battery_recomns=tempRecom,event.returnValue=the_responseObject}),ipcMain.on("solarRecom",(event,instinct_profile)=>{let instinct_config=fs.readFileSync(resolve(__dirname,"database/temp_data copy.json")),software_config=fs.readFileSync(resolve(__dirname,"database/config_data.json"));instinct_config=JSON.parse(instinct_config),software_config=JSON.parse(software_config);let temperatureData=instinct_config.temperature,simulation_days=365,simulation_hours=8760,dailyInsolData=[],insolAggregator=0,solarPowerGeneratedPerDayAggregator=0,solarPowerGeneratedPerDay_tempCompenAggregator=0,insolLimitAggregator=0,batt_active_array=Array(8760).fill(0),batt_full_SOC_failure=Array(365).fill(0),solarPowerMax_database=parseInt(instinct_config.components.solar_panel.rating),solarPowerMax=250,solarTemperatureCoeff=-.38,STP_temperature=parseInt(software_config.config_environmental_parameters[0].standard_temperature),solarPowerGenerated=instinct_config.insolation.map(insol_data=>.25*insol_data),solarPowerGenerated_tempCompen=solarPowerGenerated.map((gen_data,index)=>gen_data/(-.38*(parseInt(temperatureData[index])-STP_temperature)/100+1)),solarPowerGeneratedPerDay=[],solarPowerGeneratedPerDay_tempCompen=[];instinct_config.insolation.forEach((currentInsolation,index)=>{parseFloat(currentInsolation)>0&&(insolAggregator+=parseFloat(currentInsolation),solarPowerGeneratedPerDayAggregator+=solarPowerGenerated[index],solarPowerGeneratedPerDay_tempCompenAggregator+=solarPowerGenerated_tempCompen[index]),parseFloat(currentInsolation)>=instinct_profile.insolationLimit&&(insolLimitAggregator+=parseFloat(currentInsolation)),(index+1)%24==0&&(dailyInsolData.push(insolAggregator),solarPowerGeneratedPerDay.push(solarPowerGeneratedPerDayAggregator),solarPowerGeneratedPerDay_tempCompen.push(solarPowerGeneratedPerDay_tempCompenAggregator),insolAggregator=0,solarPowerGeneratedPerDayAggregator=0,solarPowerGeneratedPerDay_tempCompenAggregator=0)}),instinct_profile.dailyInsolData=dailyInsolData,instinct_profile.solarPowerGeneratedPerDay=solarPowerGeneratedPerDay,instinct_profile.solarPowerGeneratedPerDay_tempCompen=solarPowerGeneratedPerDay_tempCompen,console.log(solarPowerGeneratedPerDay),console.log(solarPowerGeneratedPerDay_tempCompen);let panelPowerOutput_8740hours=solarPowerGenerated_tempCompen,panelPowerOutput_365days=solarPowerGeneratedPerDay_tempCompen,splSolarDays={best:{}};splSolarDays.best.energyOfTheDay=0,splSolarDays.worst={},splSolarDays.worst.energyOfTheDay=1e4,splSolarDays.avg={},splSolarDays.avg.energyOfTheDay=0;let meanEnergy_year=panelPowerOutput_365days.reduce((a,b)=>a+b),solarData_length=panelPowerOutput_365days.length;meanEnergy_year/=solarData_length;let min_meanEnergy=Math.abs(meanEnergy_year-panelPowerOutput_365days[0]);panelPowerOutput_365days.forEach((insol_daily,index)=>{splSolarDays.best.energyOfTheDay<insol_daily&&(splSolarDays.best.energyOfTheDay=insol_daily,splSolarDays.best.dayOfYear=index),splSolarDays.worst.energyOfTheDay>insol_daily&&(splSolarDays.worst.energyOfTheDay=insol_daily,splSolarDays.worst.dayOfYear=index),min_meanEnergy>Math.abs(meanEnergy_year-insol_daily)&&(min_meanEnergy=Math.abs(meanEnergy_year-insol_daily),splSolarDays.avg.energyOfTheDay=insol_daily,splSolarDays.avg.dayOfYear=index)}),event.returnValue="TEST"}),ipcMain.on("simulation_run",async(event,data)=>{event.sender.send("simulation-response","Start");let instinct_config=await fs.readFileSync(resolve(__dirname,"database/temp_data copy.json"));mainWindow.webContents.send("progress_of_sim","30"),instinct_config=JSON.parse(instinct_config);var seed=1;rand1=rand_gen.create(1),console.log("Program is Started running... \n"),mainWindow.webContents.send("progress_of_sim","50");let climatic_rise_per_year=1.28,simulation_days=parseInt(instinct_config.simulation_data.simulation_days),simulation_hours=24*simulation_days,hours_array=Array.from({length:simulation_hours},(x,i)=>i);console.log(hours_array),console.log("Hours Array is loaded... \n");let count_hours=0,count_days=0,count_weeks=0,count_months=0,count_years=0,weekend_detect_array=Array(simulation_hours).fill(0),weekend_count_hours=0,reset_hours=0,reset_weekDays=0,batt_DOD_hourly=[],batt_DOD_day_max_array=[],batt_DOD_window_average=0,batt_DOD_averagingWindow=6,batt_DOD_accumulatedDays=0,batt_TEMP_hourly=[],batt_TEMP_day_average=[],batt_TEMP_window_average=[],batt_BATT_arhenius=[],batt_DOD_SOH_buffer,batt_SOH_final=[],batt_energy_buffer=0,power_factor=.8,load_voltage=220,load_variability_tolerance=3,load_inflation_per_year=10,weekend_load_rise=2,hour_id=0,main_loop_count_days=0,generated_load_profile=Array(simulation_hours).fill(0),load_current_demand_AC=[],load_data=instinct_config.load_profile,load_inflation_percent_per_year=.1,inverter_loading_percentage=Array(simulation_hours).fill(0),inverter_efficiency=Array(simulation_hours).fill(0),inverter_design_rating=1e3,inverter_DC_IN_POWER=Array(simulation_hours).fill(0),inverter_DC_IN_CURRENT=Array(simulation_hours).fill(0),inverter_overload_array=Array(simulation_hours).fill(0),inverter_standby_power=10,system_voltage=48,system_states=["Charging","Discharging","Float","Grid Feed"],hours_in_year=8760,add_hours=0,temperature_data=new Series(instinct_config.temperature,{name:"Temperature Profile"}),insolation_data=new Series(instinct_config.insolation,{name:"Insolation Profile"});temperature_data_df=Array.from(temperature_data.values),insolation_data_df=Array.from(insolation_data.values);let additional_hours_needed=8760-temperature_data.length,temperature_final=temperature_data_df,insolation_final=insolation_data_df,solar_Wp=400,solar_efficiency=.1986,solar_Voc=49.39,solar_Isc=10.42,solar_Vm=40.07,solar_Im=10.02,solar_fill_factor=.7801539627991243,real_area=400/198.6,solar_series=3,solar_parallel=3,stc_temperature=25,solar_pure_output=Array(simulation_hours).fill(0),solar_derated_output=Array(simulation_hours).fill(0),mod_eff_aging=[],modified_insolation_data=[],modified_temperature_data=[];mainWindow.webContents.send("progress_of_sim","60");let CC_eff=.94,CC_rating_current=30,batt_voltage=12,batt_in_parallel=1,batt_in_series=4,CC_max_charging_power=1440,CC_overload_array=Array(simulation_hours).fill(0),solar_to_CC_loss=Array(simulation_hours).fill(0),CC_charging_voltage=62.4,CC_output_raw_power=Array(simulation_hours).fill(0),CC_output_power=Array(simulation_hours).fill(0),batt_limited_DOD=parseFloat(instinct_config.simulation_data.depth_of_discharge/100),time_super_start=17,time_super_end=24,pre_sim_energy=0,batt_init_SOH=1,batt_init_SOC=1,batt_AH_individual=200,batt_effective_AH=200,batt_C_RATE=10,batt_optimal_output_current_maximum=20,batt_peukert_constant=1.4,batt_BMS_eff=.99,batt_OUT_current=Array(simulation_hours).fill(0),batt_CORRECTED_CURRENT=Array(simulation_hours).fill(0),batt_AH_OUTPUT=Array(simulation_hours).fill(0),batt_POWER_OUTPUT=Array(simulation_hours).fill(0),batt_total_batteries=4,batt_total_AH=800,batt_design_WH=9600,batt_discharge_current_flag=!0,batt_DOD=0,batt_recharge_power=Array(simulation_hours).fill(0),batt_charging_flag_array=Array(simulation_hours).fill(0),batt_inst_energy=0,batt_inst_SOH=1,batt_inst_WH_array=Array(simulation_hours).fill(0),batt_DOD_array=Array(simulation_hours).fill(0),batt_SOH_array=[],batt_DOD_interim=nj.zeros(24),batt_DOD_daily_full=nj.zeros(simulation_days),days_counter=0,energy_surplus=Array(simulation_hours).fill(0),energy_unmet=Array(simulation_hours).fill(0),batt_fail_count=0,batt_current_flow=nj.zeros(simulation_hours),batt_recharge_current=0,batt_test_DOD=0,batt_recharge_losses=.01,batt_real_WH=0,batt_recharge_factor=.9,batt_chargable=!0,batt_dischargable=!0,batt_discharge_current_relation=!0,batt_energy_pure=Array(simulation_hours).fill(0),batt_temp_compensated_energy,excess_energy;for(await event.sender.send("state_of_sim","Weekend Detection");count_hours<hours_array.length;count_hours++)reset_hours+=1,reset_weekDays>4&&(weekend_detect_array[count_hours]=1),reset_hours%24==0&&(count_days+=1,reset_weekDays+=1,reset_hours=0),7==reset_weekDays&&(count_weeks+=1,reset_weekDays=0),count_months=count_weeks/4;console.log("Hours Array is loaded... \n");let load_variability=0;for(load_data_inst=0;load_data_inst<simulation_hours;load_data_inst++)load_variability=.01*rand1.floatBetween(-3,3),hour_id=load_data_inst%24,0==hour_id&&0!=load_data_inst&&(count_days+=1),generated_load_profile[load_data_inst]=load_data[hour_id],generated_load_profile[load_data_inst]+=generated_load_profile[load_data_inst]*load_variability,Math.round(load_data_inst/8760)>0&&(generated_load_profile[load_data_inst]+=.1*load_data[hour_id]*Math.round(load_data_inst/8760)),1==weekend_detect_array[load_data_inst]&&(generated_load_profile[load_data_inst]+=.02*generated_load_profile[load_data_inst]);for(await event.sender.send("state_of_sim","Load Profile Data Generated"),i=0;i<simulation_hours;i++)load_current_demand_AC.push(generated_load_profile[i]/176);for(console.log("\nLOAD PROFILE -------------- RESULTS\n"),i=0;i<simulation_hours;i++){if(generated_load_profile[i]<1e3){let inv_variable_1=generated_load_profile[i]/1e3*100;inverter_loading_percentage[i]=inv_variable_1;let inv_variable_2=90-104.43*Math.exp(-.524*Math.pow(inv_variable_1,.686));inverter_efficiency[i]=inv_variable_2;let inv_variable_3=generated_load_profile[i]/(inv_variable_2/100);inverter_DC_IN_POWER[i]=inv_variable_3,inverter_DC_IN_CURRENT[i]=inv_variable_3/48}else console.log("SYSTEM FAILED - INVERTER OVERLOAD - CONSIDER UPRATING INVERTER"),inverter_overload_array[i]=1;mod_eff_aging.push(.1986*(1-84e-8*hours_array[i]))}if(console.log("\nINVERTER -------------- RESULTS\n"),additional_hours_needed>0)for(add_hours=0;add_hours<additional_hours_needed;add_hours++)temperature_final.push(temperature_data.iloc(add_hours-additional_hours_needed)),insolation_final.push(insolation_data.iloc(temperature_final.length%24));else additional_hours_needed<0&&(temperature_final=temperature_final.slice(0,8760),insolation_final=insolation_final.slice(0,8760));if(simulation_days<=365&&(modified_insolation_data=insolation_final.slice(0,24*simulation_days),modified_temperature_data=temperature_final.slice(0,24*simulation_days)),simulation_days>365)for(modified_insolation_data=insolation_final.slice(0,24*simulation_days),modified_temperature_data=temperature_final.slice(0,24*simulation_days),i=8760;i<=simulation_hours;i++){let hour_measure=i%8760;modified_insolation_data.push(insolation_final[hour_measure]),modified_temperature_data.push(temperature_final[hour_measure]+1.28)}if(console.log("\nData Cleanup Finished ---------------------\n"),console.log("\nSolar Generation Works Start---------------------\n"),instinct_config.simulation_data.solar_panel_aging_flag){let solar_total_panels=9;for(i=0;i<simulation_hours;i++)solar_pure_output[i]=modified_insolation_data[i]*(400/198.6)*mod_eff_aging[i]*solar_total_panels,instinct_config.simulation_data.solar_panel_temperature_flag?solar_derated_output[i]=-.38*solar_pure_output[i]*(modified_temperature_data[i]-25)/100+solar_pure_output[i]:solar_derated_output=solar_pure_output}else for(i=0;i<simulation_hours;i++)solar_pure_output[i]=modified_insolation_data[i]*(400/198.6)*.1986*solar_total_panels,instinct_config.simulation_data.solar_panel_temperature_flag?solar_derated_output[i]=-.38*solar_pure_output[i]*(modified_temperature_data[i]-25)/100+solar_pure_output[i]:solar_derated_output=solar_pure_output;for(console.log("\nSolar panel output finished...---------------------\n"),i=0;i<simulation_hours;i++)1440-solar_derated_output[i]>0?solar_to_CC_loss[i]=0:solar_to_CC_loss[i]=solar_derated_output[i]-1440,CC_output_raw_power[i]=.94*solar_derated_output[i],CC_output_raw_power[i]>=1440>0?CC_output_power[i]=1440:(CC_output_power[i]=CC_output_raw_power[i],CC_overload_array[i]=1);for(console.log("\nCharge Controller output finished...---------------------\n"),i=17;i<24;i++)pre_sim_energy+=inverter_DC_IN_POWER[i];for(batt_DOD=pre_sim_energy/9600,i=0;i<simulation_hours;i++)batt_OUT_current[i]=inverter_DC_IN_CURRENT[i]/.99,instinct_config.simulation_data.batt_discharge_current_flag?(batt_CORRECTED_CURRENT[i]=batt_discharge_current_compensation(batt_OUT_current[i],1.4,200,10),batt_POWER_OUTPUT[i]=48*batt_CORRECTED_CURRENT[i]):(batt_CORRECTED_CURRENT[i]=batt_OUT_current[i],batt_POWER_OUTPUT[i]=48*batt_CORRECTED_CURRENT[i]);for(i=0;i<simulation_hours;i++)CC_output_power[i]-inverter_DC_IN_POWER[i]<0?batt_recharge_power[i]=0:batt_recharge_power[i]=CC_output_power[i]-inverter_DC_IN_POWER[i],batt_charging_flag_array[i]=CC_output_power[i]>0&&batt_recharge_power[i]>0;for(batt_inst_energy=9600,batt_inst_energy-=pre_sim_energy,batt_chargable=9600>batt_inst_energy,batt_dischargable=0!=batt_inst_energy,i=0;i<6;i++)batt_DOD_day_max_array.push(batt_DOD);for(batt_real_WH=9600,i=0;i<simulation_hours;i++)if(batt_charging_flag_array[i]){if(batt_chargable){let batt_effective_recharge_power=batt_recharge_factor_compen(batt_recharge_power[i],.9),batt_energy_final=batt_inst_energy+batt_effective_recharge_power-.01*batt_recharge_power[i];batt_energy_final<batt_real_WH?(batt_inst_energy+=batt_effective_recharge_power-.01*batt_recharge_power[i],batt_chargable=!0,batt_dischargable=!0,energy_surplus[i]=0):batt_energy_final==batt_real_WH?(batt_inst_energy+=batt_effective_recharge_power-.01*batt_recharge_power[i],batt_chargable=!1,batt_dischargable=!0,energy_surplus[i]=0):batt_energy_final>batt_real_WH?(excess_energy=batt_inst_energy+batt_recharge_power[i]-batt_real_WH,batt_inst_energy=batt_real_WH,batt_chargable=!1,batt_dischargable=!0,energy_surplus[i]=excess_energy):console.log("NO BLOCKS ACTIVATED- CHECK CHARGING LOOP")}else batt_chargable||(batt_inst_energy=batt_real_WH,batt_chargable=!1,batt_dischargable=!0,energy_surplus[i]=batt_recharge_power[i],console.log("Battery Floating .. 3 "+batt_recharge_power[i]));batt_DOD=1-batt_inst_energy/batt_real_WH,batt_DOD_array[i]=batt_DOD,batt_inst_WH_array[i]=batt_inst_energy,energy_unmet[i]=0}else if(!batt_charging_flag_array[i]&&(batt_real_WH=9600*batt_inst_SOH,batt_energy_buffer=batt_POWER_OUTPUT[i],instinct_config.simulation_data.batt_temperature_flag&&(batt_energy_buffer=batt_temp_adjustment(batt_POWER_OUTPUT[i],modified_temperature_data[i],batt_real_WH)),batt_test_DOD=1-(batt_inst_energy-batt_energy_buffer)/batt_real_WH,batt_dischargable?batt_test_DOD<batt_limited_DOD?(batt_inst_energy-=batt_energy_buffer,batt_energy_pure[i]=batt_inst_energy,batt_chargable=!0,batt_dischargable=!0,energy_unmet[i]=0):batt_test_DOD==batt_limited_DOD?(batt_inst_energy-=batt_energy_buffer,batt_energy_pure[i]=batt_inst_energy,batt_chargable=!0,batt_dischargable=!1,energy_unmet[i]=0):batt_test_DOD>batt_limited_DOD&&(batt_inst_energy=(1-batt_limited_DOD)*batt_real_WH,batt_energy_pure[i]=batt_inst_energy,batt_chargable=!0,batt_dischargable=!1,energy_unmet[i]=batt_real_WH*(batt_test_DOD-batt_limited_DOD),batt_fail_count+=1):batt_dischargable||(batt_inst_energy=(1-batt_limited_DOD)*batt_real_WH+10,batt_energy_pure[i]=batt_inst_energy,batt_chargable=!0,batt_dischargable=!1,energy_unmet[i]=48*batt_OUT_current[i],batt_fail_count+=1),batt_DOD=1-batt_inst_energy/batt_real_WH,batt_DOD_array[i]=batt_DOD,energy_surplus[i]=0,batt_inst_WH_array[i]=batt_inst_energy,batt_DOD_hourly.push(batt_DOD),batt_TEMP_hourly.push(modified_temperature_data[i]),i%24==0&&(main_loop_count_days++,0!=i))){var largest=0;for(n=0;n<batt_DOD_hourly.length;n++)largest<batt_DOD_hourly[n]&&(largest=batt_DOD_hourly[n]);batt_DOD_day_max_array.shift(),batt_DOD_day_max_array.push(largest),batt_DOD_hourly=[],batt_DOD_accumulatedDays+=batt_DOD_day_max_array[batt_DOD_day_max_array.length-1],main_loop_count_days%6==0&&0!=main_loop_count_days&&(batt_DOD_window_average=batt_DOD_day_max_array.reduce((x,y)=>x+y)/batt_DOD_day_max_array.length),batt_TEMP_day_average.push(batt_TEMP_hourly.reduce((x,y)=>x+y)/batt_TEMP_hourly.length),batt_TEMP_hourly=[],batt_DOD_SOH_buffer=batt_DOD_compensation_program(100*batt_DOD_window_average),batt_BATT_arhenius.push(batt_arhennius_compensation_program(batt_DOD_SOH_buffer,batt_TEMP_day_average[batt_TEMP_day_average.length-1],25)),instinct_config.simulation_data.batt_aging_flag?(batt_inst_SOH=batt_SOH_compensation_program(80,batt_BATT_arhenius[batt_BATT_arhenius.length-1],batt_DOD_accumulatedDays)/100,batt_SOH_final.push(100*batt_inst_SOH)):batt_inst_SOH=1}mainWindow.webContents.send("progress_of_sim","85");let energy_utilized=[];for(i=0;i<simulation_hours;i++)energy_utilized.push(generated_load_profile[i]-energy_unmet[i]);let simulation_outputs={},out_DOD_month_min=[],out_DOD_month_max=[],out_solar_energy_per_month=[],out_solar_energy_per_day=[],out_temp_month_min=[],out_temp_month_max=[],out_unmet_energy_month=[],out_surplus_energy_month=[],out_DOD_inst_max=0,out_DOD_inst_min=100,out_unmet_energy_sum_day=0,out_surplus_energy_sum_day=0,out_unmet_energy_sum_month=0,out_surplus_energy_sum_month=0,out_unmet_energy_per_day=[],out_surplus_energy_per_day=[],out_solar_day_sum=0,out_solar_month_sum=0,energy_saved_per_day=[],energy_saved_per_month=[],energy_saved_per_day_sum=0,energy_saved_per_month_sum=0;for(counter=0;counter<=simulation_hours;counter++)energy_saved_per_day_sum+=energy_utilized[counter],energy_saved_per_month_sum+=energy_utilized[counter],out_DOD_inst_max<batt_DOD_array[counter]&&(out_DOD_inst_max=batt_DOD_array[counter]),out_DOD_inst_min>batt_DOD_array[counter]&&(out_DOD_inst_min=batt_DOD_array[counter]),out_unmet_energy_sum_day+=energy_unmet[counter],out_unmet_energy_sum_month+=energy_unmet[counter],out_surplus_energy_sum_day+=energy_surplus[counter],out_surplus_energy_sum_month+=energy_surplus[counter],out_solar_day_sum+=solar_derated_output[counter],out_solar_month_sum+=solar_derated_output[counter],counter%23==0&&0!=counter&&(out_unmet_energy_per_day.push(out_unmet_energy_sum_day),out_unmet_energy_sum_day=0,out_surplus_energy_per_day.push(out_surplus_energy_sum_day),out_surplus_energy_sum_day=0,out_solar_energy_per_day.push(out_solar_day_sum),out_solar_day_sum=0,energy_saved_per_day.push(energy_saved_per_day_sum),energy_saved_per_day_sum=0),counter%719==0&&0!=counter&&(out_DOD_month_max.push(out_DOD_inst_max),out_DOD_month_min.push(out_DOD_inst_min),out_DOD_inst_max=0,out_DOD_inst_min=100,out_solar_energy_per_month.push(out_solar_month_sum),out_solar_month_sum=0,out_unmet_energy_month.push(out_unmet_energy_sum_month),out_unmet_energy_sum_month=0,out_surplus_energy_month.push(out_surplus_energy_sum_month),out_surplus_energy_sum_month=0,energy_saved_per_month.push(energy_saved_per_month_sum),energy_saved_per_month_sum=0);simulation_outputs.solar_power_output_perday=out_solar_energy_per_day,simulation_outputs.solar_power_output_permonth=out_solar_energy_per_month,simulation_outputs.unmet_energy_perday=out_unmet_energy_per_day,simulation_outputs.unmet_energy_permonth=out_unmet_energy_month,simulation_outputs.surplus_energy_perday=out_surplus_energy_per_day,simulation_outputs.surplus_energy_permonth=out_surplus_energy_month,simulation_outputs.months_array=["January","February","March","April","May","June","July","August","September","October","November","December"],simulation_outputs.days_number=nj.arange(simulation_days);let SOH_nj=nj.array(batt_SOH_final),nj_X_data=nj.arange(simulation_days-1);var regressive_data=linear_regression(nj_X_data,SOH_nj);mainWindow.webContents.send("progress_of_sim","95"),simulation_outputs.batt_SOH_line_equation=regressive_data;var fitted_curve=[];for(i=0;i<simulation_days;i++)fitted_curve.push(regressive_data.slope*i+regressive_data.intercept);simulation_outputs.batt_SOH_fitted_curve=fitted_curve;let batt_life_predicted=-20/regressive_data.slope;simulation_outputs.predicted_life_of_battery=batt_life_predicted;let energy_unmet_acccumulated=nj.array(energy_unmet),energy_surplus_acccumulated=nj.array(energy_surplus);console.log("UNMET "+energy_unmet_acccumulated.sum()),console.log("SURplus "+energy_surplus_acccumulated.sum()),simulation_outputs.energy_unmet_total=energy_unmet_acccumulated.sum(),simulation_outputs.energy_surplus_total=energy_surplus_acccumulated.sum(),simulation_outputs.simulated_days=simulation_days,simulation_outputs.energy_saved_daily=energy_saved_per_day,simulation_outputs.energy_saved_monthly=energy_saved_per_month;let energy_saved_acccumulated=nj.array(energy_utilized);simulation_outputs.energy_saved_overall=energy_saved_acccumulated.sum(),console.log("------------------------END OF THE PROGRAM--------------------"),mainWindow.webContents.send("progress_of_sim","98");let base_output_folder=resolve(__dirname,"outputs");fs.writeFile(resolve(base_output_folder,"output_energy_unmet.json"),JSON.stringify(energy_unmet),(function(err){if(err)throw err;console.log("ENERGY_UNMET-SAVED")})),fs.writeFile(resolve(base_output_folder,"output_energy_surplus.json"),JSON.stringify(energy_surplus),(function(err){if(err)throw err;console.log("ENERGY_SURPLUS-SAVED")})),fs.writeFile(resolve(base_output_folder,"output_batt_SOH.json"),JSON.stringify(batt_SOH_final),(function(err){if(err)throw err;console.log("BATT_SOH-SAVED")})),fs.writeFile(resolve(base_output_folder,"output_batt_DOD.json"),JSON.stringify(batt_DOD_array),(function(err){if(err)throw err;console.log("BATT-DOD-SAVED")})),fs.writeFile(resolve(base_output_folder,"simulation_outputs.json"),JSON.stringify(simulation_outputs),(function(err){if(err)throw err;console.log("SIMLUATION OUTPUT SAVED")})),event.reply("simulation-response","Over"),mainWindow.webContents.send("progress_of_sim","100"),event.returnValue="Simulation Complete"}),ipcMain.on("call-configuration",async(event,data)=>{console.log("CREATE NEW WINDOW FOR CONFIG")}),ipcMain.on("save_recent_design",(event,data)=>{console.log(data),fs.writeFile(resolve(__dirname,"database/load_design_recent.json"),data,(function(err){if(err)throw err;console.log("Load Design Saved")}))}),ipcMain.on("save_template_design",(event,data)=>{let new_template=JSON.parse(data),template_data=fs.readFileSync(resolve(__dirname,"database/load_design_templates.json"));template_data=JSON.parse(template_data);const write_new_template=(new_template,templates_collection)=>{let new_collection=[];templates_collection.forEach(template_data=>{new_collection.push(template_data)}),new_collection.push(new_template),new_collection=JSON.stringify(new_collection),fs.writeFile(resolve(__dirname,"database/load_design_templates.json"),new_collection,(function(err){if(err)throw err;console.log("Load Template Saved")}))};template_data.forEach(the_template=>{the_template.arrange_name!=new_template.arrange_name?write_new_template(new_template,template_data):console.log("CANNOT SAVE - ARRANGEMENT ALREADY EXISTS")})}),ipcMain.on("delete_template_design",(event,data)=>{let template_data=fs.readFileSync(resolve(__dirname,"database/load_design_templates.json"));template_data=JSON.parse(template_data),template_data.forEach((the_template,index,t_data)=>{if(the_template.arrange_name==data){let options={type:"question",title:"Confirmation",buttons:["Yes,Please","No, Thank You"],message:"Do you really want to Delete the Arrangement?",detail:"Deleting will permenently delete the selected load arrangement from your INSTINCT database"};dialog.showMessageBox(options).then(result=>{if(0==result.response){t_data.splice(index,1);let new_templates=[];new_templates=JSON.stringify(t_data),fs.writeFile(resolve(__dirname,"database/load_design_templates.json"),new_templates,(function(err){if(err)throw err;event.reply("delete_status","DELETED")}))}else event.reply("delete_status","NOT DELETED")})}})});